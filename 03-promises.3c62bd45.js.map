{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAaC,SAASC,cAAc,uBACpCC,EAAiBF,SAASC,cAAc,sBACxCE,EAAcH,SAASC,cAAc,wBAgC3C,SAASG,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAxCAN,SAASC,cAAc,SA6C/BY,iBAAiB,UA3CJC,IAEfA,EAAKC,iBAEN,MAAMC,EAAQC,SAASlB,EAAWmB,OAC5BC,EAAYF,SAASf,EAAegB,OACpCE,EAASH,SAASd,EAAYe,OAEpC,IAAK,IAAIG,EAAI,EAAGA,EAAID,EAAQC,IAAK,CAI/BjB,EAHiBiB,EACIL,EAAQK,EAAIF,GAG9BG,MAAK,EAACjB,SAAEA,EAAQC,MAAEA,MACjBiB,EAAA1B,GAAS2B,OAAOC,QACd,uBAAqBpB,QAAiBC,MAAU,IAKnDoB,OAAM,EAACrB,SAAEA,EAAQC,MAAEA,MAClBiB,EAAA1B,GAAS2B,OAAOG,QACd,sBAAoBtB,QAAiBC,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst inputDelay = document.querySelector('input[name=\"delay\"]');\nconst inputDelayStep = document.querySelector('input[name=\"step\"]');\nconst inputAmount = document.querySelector('input[name=\"amount\"]');\nconst form = document.querySelector('.form');\n\nconst logSubmit = event => {\n  //zeby strona sie nie odswiezala, tylko na form mozna to zrobić\n  event.preventDefault();\n  //musimy uzyc funkcji parseInt bo liczby traktowal ja stringi i 100+0 to dla niego 1000\n  const delay = parseInt(inputDelay.value);\n  const delayStep = parseInt(inputDelayStep.value);\n  const amount = parseInt(inputAmount.value);\n\n  for (let i = 0; i < amount; i++) {\n    const position = i;\n    const promiseDelay = delay + i * delayStep;\n    //wywolanie funcji createPromise\n    createPromise(position, promiseDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n\n        // console.log(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    //console.log(`Rejected promise ${position} in ${delay}ms`);\n  }\n};\n//definicja funkcji createPromise\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n//mozna by to zrobić na buttonie, do buttona jest event \"click\"\n//jak na buttonie zrobisz to strona będzie się odświezać i będziesz tracić wpisane do inputów dane\nform.addEventListener('submit', logSubmit);\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$inputDelay","document","querySelector","$47d4ff9957288465$var$inputDelayStep","$47d4ff9957288465$var$inputAmount","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","event","preventDefault","delay1","parseInt","value","delayStep","amount","i","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.3c62bd45.js.map"}